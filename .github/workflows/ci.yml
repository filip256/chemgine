name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CLICOLOR: 1

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install pre-commit
      run: pip install --upgrade pip pre-commit

    - name: Cache pre-commit environment
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-

    - name: Run pre-commit checks
      run: pre-commit run --all-files --show-diff-on-failure

  build:
    name: Build / ${{ matrix.kind.name }}
    needs: pre-commit
    runs-on: ${{ matrix.kind.os }}

    strategy:
      fail-fast: false
      matrix:
        kind:
        - { name: Windows-VS2022-x64-Release, os: windows-2022,  arch: x64, config: Release, c_compiler: cl.exe, cpp_compiler: cl.exe,  generator: Ninja,          flags: -DEXTENDED_CHAR_SET=ASCII }
        - { name: Windows-VS2022-x86-Release, os: windows-2022,  arch: x86, config: Release, c_compiler: cl.exe, cpp_compiler: cl.exe,  generator: Ninja,          flags: -DEXTENDED_CHAR_SET=ASCII }
        - { name: Ubuntu-GCC-x64-Release,     os: ubuntu-latest, arch: x64, config: Release, c_compiler: gcc,    cpp_compiler: g++,     generator: Unix Makefiles, flags: -DEXTENDED_CHAR_SET=ASCII }
        - { name: Ubuntu-Clang-x64-Release,   os: ubuntu-latest, arch: x64, config: Release, c_compiler: clang,  cpp_compiler: clang++, generator: Unix Makefiles, flags: -DEXTENDED_CHAR_SET=ASCII }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup (Windows)
        if: matrix.kind.os == 'windows-2022'
        run: |
          choco install ninja -y
          choco install sccache -y
          ninja --version
          sccache --version

          echo "SCCACHE_DIR=${{ runner.temp }}\\sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=500M" >> $GITHUB_ENV

      - name: Setup (Ubuntu)
        if: matrix.kind.os == 'ubuntu-latest'
        run: |
          chmod +x setup_ubuntu.sh
          ./setup_ubuntu.sh

          curl -L https://github.com/mozilla/sccache/releases/download/v0.10.0/sccache-dist-v0.10.0-x86_64-unknown-linux-musl.tar.gz | tar xz
          sudo mv sccache-dist-v0.10.0-x86_64-unknown-linux-musl/sccache-dist /usr/local/bin/sccache
          sudo chmod +x /usr/local/bin/sccache
          sccache --version

          echo "SCCACHE_DIR=~/.cache/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=500M" >> $GITHUB_ENV

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
          key: deps-${{ matrix.kind.name }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            deps-${{ matrix.kind.name }}-

      - name: Restore build
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.SCCACHE_DIR }}
          key: ${{ matrix.kind.name }}-${{ github.event.pull_request.head.ref || github.ref_name }}
          restore-keys: |
            ${{ matrix.kind.name }}-${{ github.event.pull_request.base.ref || github.ref_name }}

      - name: Configure environment (Windows)
        if: matrix.kind.os == 'windows-2022'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.kind.arch }}

      - name: Configure build
        env:
          CC: ${{ matrix.kind.c_compiler }}
          CXX: ${{ matrix.kind.cpp_compiler }}
        run: cmake -B build -G "${{ matrix.kind.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.kind.config }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.kind.flags }}

      - name: Build
        run: cmake --build build --config ${{ matrix.kind.config }} --parallel 4

      # - name: Show files recursively
      #   run: tree -a || (echo "tree not found, listing recursively"; ls -laR)

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: Chemgine-${{ matrix.kind.name }}
          retention-days: 1
          compression-level: 9
          path: |
            build/gui_app/**/gui_app*
            build/gui_app/**/data/**
            build/gui_app/**/fonts/**
            build/test_app/**/test_app*
            build/test_app/**/data/**
            build/defparse/**/defparse*
            !**/CMakeFiles/**

      - name: Delete old build cache
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ matrix.kind.name }}-${{ github.event.pull_request.head.ref || github.ref_name }}" --confirm
        continue-on-error: true

      - name: Save build cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.SCCACHE_DIR }}
          key: ${{ matrix.kind.name }}-${{ github.event.pull_request.head.ref || github.ref_name }}

  unit:
    name: Unit / ${{ matrix.kind.name }}
    needs: build
    runs-on: ${{ matrix.kind.os }}

    strategy:
      fail-fast: false
      matrix:
        kind:
        - { name: Windows-VS2022-x64-Release, os: windows-2022,  config: Release }
        - { name: Windows-VS2022-x86-Release, os: windows-2022,  config: Release }
        - { name: Ubuntu-GCC-x64-Release,     os: ubuntu-latest, config: Release }
        - { name: Ubuntu-Clang-x64-Release,   os: ubuntu-latest, config: Release }

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Chemgine-${{ matrix.kind.name }}

      - name: Run unit tests (Windows)
        if: matrix.kind.os == 'windows-2022'
        working-directory: ./test_app/
        run: ./test_app.exe -u

      - name: Run unit tests (Ubuntu)
        if: matrix.kind.os == 'ubuntu-latest'
        working-directory: ./test_app/
        run: |
          chmod +x test_app
          xvfb-run ./test_app -u
