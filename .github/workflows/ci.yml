name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build / ${{matrix.kind.name}}
    runs-on: ${{matrix.kind.os}}

    strategy:
      fail-fast: false
      matrix:
        kind:
        - { name: Windows-VS2022-x64-Release, os: windows-2022,  config: Release, flags: -A x64 }
        - { name: Windows-VS2022-x64-Debug,   os: windows-2022,  config: Debug,   flags: -A x64 }
        - { name: Windows-VS2022-x86-Release, os: windows-2022,  config: Release, flags: -A Win32 }
        # - { name: Windows-VS2022-x86-Debug,   os: windows-2022,  config: Debug,   flags: -A Win32 }
        - { name: Ubuntu-GCC-x64-Release,     os: ubuntu-latest, config: Release, flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ }
        # - { name: Ubuntu-GCC-x64-Debug,       os: ubuntu-latest, config: Debug,   flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ }
        - { name: Ubuntu-Clang-x64-Release,   os: ubuntu-latest, config: Release, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        # - { name: Ubuntu-Clang-x64-Debug,     os: ubuntu-latest, config: Debug,   flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        if: matrix.kind.os == 'ubuntu-latest'
        run: |
          chmod +x setup_ubuntu.sh
          ./setup_ubuntu.sh

      - name: Configure
        run: cmake -B build ${{matrix.kind.flags}} -DCMAKE_BUILD_TYPE=${{matrix.kind.config}}

      - name: Build
        run: cmake --build build --config ${{matrix.kind.config}} --parallel 4

      - name: Show files recursively
        run: tree -a || (echo "tree not found, listing recursively"; ls -laR)

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: Chemgine-${{matrix.kind.name}}
          compression-level: 9
          path: |
            build/gui_app/**/gui_app*
            build/gui_app/**/data/**
            build/gui_app/**/fonts/**
            build/test_app/**/test_app*
            build/test_app/**/data/**
            build/defparse/**/defparse*

  unit:
    name: Unit / ${{matrix.kind.name}}
    needs: build
    runs-on: ${{matrix.kind.os}}

    strategy:
      fail-fast: false
      matrix:
        kind:
        - { name: Windows-VS2022-x64-Release, os: windows-2022,  config: Release, flags: -A x64 }
        # - { name: Windows-VS2022-x64-Debug,   os: windows-2022,  config: Debug,   flags: -A x64 }
        - { name: Windows-VS2022-x86-Release, os: windows-2022,  config: Release, flags: -A Win32 }
        # - { name: Windows-VS2022-x86-Debug,   os: windows-2022,  config: Debug,   flags: -A Win32 }

        - { name: Ubuntu-GCC-x64-Release,     os: ubuntu-latest, config: Release, flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ }
        # - { name: Ubuntu-GCC-x64-Debug,       os: ubuntu-latest, config: Debug,   flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ }
        - { name: Ubuntu-Clang-x64-Release,   os: ubuntu-latest, config: Release, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        # - { name: Ubuntu-Clang-x64-Debug,     os: ubuntu-latest, config: Debug,   flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Chemgine-${{matrix.kind.name}}

      - name: Headless OpenGL setup (Windows)
        if: matrix.kind.os == 'windows-2022'
        run: |
          curl -L -o mesa-x64.7z https://downloads.fdossena.com/Projects/Mesa3D/Builds/MesaForWindows-x64-20.1.8.7z
          7z x mesa-x64.7z -omesa-x64
          cp mesa-x64/opengl32.dll ./test_app/${{matrix.kind.config}}/

      - name: Show files recursively
        run: tree -a || (echo "tree not found, listing recursively"; ls -laR)

      - name: Run unit tests (Windows)
        if: matrix.kind.os == 'windows-2022'
        working-directory: ./test_app/${{matrix.kind.config}}/
        run: ./test_app.exe -u

      - name: Run unit tests (Ubuntu)
        if: matrix.kind.os == 'ubuntu-latest'
        working-directory: ./test_app/
        run: |
          chmod +x test_app
          xvfb-run ./test_app -u
