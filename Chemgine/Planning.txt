We need a SMILES interpreter for defining structures, and using third party software
We need to store backbones, functional groups and atoms as singletons for RAM and form molecules from them

=> Thus we need a way to convert SMILES <--> molecule <--> optimized molecule (ideally whithout the molecule middle step)

Optimized molecules = Molecules derived from a backbone using functional groups and atoms.
Backbone = Common molecule like benzene, indole, tryptamine etc.
Functional groups = Incomplete molecules that can be completed by ONE OR MORE atoms, backbones or functional groups
Atom = Most basic unit

-- Storing singletons --
A data manager class is needed that loads the properties of objects from CSV files
Info about an object can be retrieved by a key or id (incremental numeric / string with hashmap)


-- MolecularStructure --
A graph like representation for molecules holding Atoms, FunctionalGroups and Backbones as nodes and Bonds
Hydrogens are implied where needed 


-- Atoms --
Atoms are modeld as a class containg their properties, stored as singletons
Some special atoms need to be defined like: 
 > R (organic radical)
 > A (aromatic radical)
 > Me (metal) 
 (see Functional Groups and Reactions)


-- Functional Groups --
Functional groups are MolecularStructures that contain at least one special atom,
specifying the position where a radical should be inserted


-- Backbones --
Complete MolecularStructures on which substitutions can be made.
New backbones cannot be creaded by the algorithm.

Could a backbone be formed from another backbone?
 - YES:   better memory for storing backbones
          pattern matching could break
 - no:   better memory for atom identifiers, which are more common (only one id needs to be stored)
         backbone reccurrsion could be mentained in data files, bun not in RAM
 - both: establish a hard limit (ie 3) for how deep the reccursion can get


-- Molecules -- 
Complete MolecularStructures. They differ from backbones by being more specific.
Molecules cannot be considered backbones for other molecules.
Some molecules can be defined in files for their properties and new ones can be created and stored by the algorithm.



In an optimized molecular structure there must be a way to specify which atoms are bounded:
  AtomIdentifier can hold a reference to a MolecularStructure and the index of one atoms withing that structure



  Reactions:
   A reaction has a list of reactants, a list of products, a list of conditions and some
   properties like base speed. A mapping between every atom in reactants and those from products
   must be made in a deterministic and trivial way.
   Stoechiometry could be determined.

   Possible CSV:
       id, reactants    , conditions, products     , properties
       10, [smiles, ...], [cat, ...], [smiles, ...], prop ...

  ReactionCondition:
   Polymorphic type with a method that determines to what extent the condition is met.

  PhysicalState: (for later)
   Describes the physical system inside a reactor/environment.


   Stoechiometry:
    1. Name each reactant (Ri) and product (Pi), and their coefficinets (Xi, Yi);
    2. Find the liniar eq of every atom A by:
        SUM[i:0->n] { Xi*(cnt A in Ri) - Yi*(cnt A in Pi) }
    3. Since the system will usually have 1 degree of freedom, the coefficient of 
       the first product is locked in at 1 and thus the number of unknowns is reduced
    4. Solve the system formed by each eq(A) using Gaussian elimination
    5. If needed, multiply coefficients to obtain integers

   Specializing reactions:
    If all the reactants and products of a reaction are sub-structurally matched by all
    the reactants and products of another reaction, then the first reaction is considered
    a specialization of the second reaction. A reaction may become the specialization of
    multiple other reactions.

    A network forms between reactions and their specializations, where the most generic 
    reactions form the first layer, user-defined concrete reactions form the final layer
    and specialized reactions form the layers inbetween.

    When querying reactions, only the first layer has to be fully parsed. If a first layer
    reaction is found to be compatible, the search continues with its specializations,
    stopping at the most specialized matching reaction.

    If the same specialized reaction is reached from multiple inputs, duplicates must be
    removed.

    Advantages:
        * better query complexity
        * duplicate concrete reactions are naturally never generated
        * specialized reactions may inherit or override properties from their parents
        * allows for "cut" reactions to be defined
    Disadvantages:
        * creating the network is a complex operation, altough performed in preprocessing,
        serialization of the networks in hot reloads should be considered

    Algorithm:
     1. read all reactions, store them as usual
     2. create a list for storing the first layer
     3. for every reaction X:
            if X mathes a reaction R from the first layer:
                for every specialization R' of R:
                    if X matches R':
                        continue checking the specializations R'' of R' (just like we did for R)
                    if R' mathces X:
                        insert X between R and R'   (X does not multiply, rather it becomes the parent of all mathing R'i)
                    if X is equivalent with R':     (X matches R' and R' mathces X)
                        ignore X
                if X did not match any R':
                    insert X as a new specialization of R
            if a reaction R from the first layer mathes X:
                insert X in the first layer in place of R, make R a child of X
                (X does not multiply, rather it becomes the parent of all mathing Ri)
            if X is equivalent to R:
                ignore X
            
            always remeber the place of the first inserion of X and link the next insertions of X to that one

            (a "visited" set could be used to ensure X is not matched with and R twice, in case of potential cycles,
            this is not required since the equivalency will be caught but it may still be a singnificant optimization,
            especially if cycles occur early in the network)
     4. loop through all reactions and inherit any undefined properties
             

-- Reactables --
F. groups, backbones, atoms, organics, anorganics can all be reactants and products.
Reactables provide access to the MolecularStructure of each of these types.
They are similar to Components but with a different purpose.
    

-- ConcreteReactions --
Represent the actual reaction that takes place and it is formed by instancing an existing
Reaction with real molecules from a Reactor. In essence they must describe efficiently
exactly what gets consumed and created and must be appliable on a reactor.


-- MergeSubstitute --
A method that receives the molecules X, R, P and a mapping between X-R and R-P and returns a new molecule
similar to P but containing all of the substituents from X.



# How to check if a reaction occurs in a reactor:
   - physical conditions must match
   - catalysts must be present
   - every there must be o molecule that matches every reactant:
      ! molecules, f. groups, bacbones have different matching rules => reactables !
      ! the same molecule can match mutiple reactants !
      ! one reactant must be matched by exactly one molecule !
      ! not all molecules in the reactor need to match (obvious) !

   I.  Easy but bad: Loop through all reactions and check if each reactant matches a molecule, return
       the matching between each reactant and molecule
   II. Faster but more memory: Send a list of molecules to the dataStore. the store does intelligen queries
       and returns a map of {molecules, reactions}

   How to prevent duplicate reactions:
      New reactions should occur when:
       - a new molecule appears => the reaction must contain at least 1 new molecule
       - physical props. change => the new reaction must have a different id from the existing ones

# How to generate a concrete reaction:
    - find a possible reaction
    - decide how many of each of the reacting molecules is needed
    - knowing the molecule-reactant mapping and the reactant-product mapping,
      generate the structures of the products
    - if no molecule is defined with this new structure, define it and approximate properties
    - store the reactant and product lists of molecules
    - approximate reaction speed and themodynamics


Tasks:
  DONE. Create atoms CSV with Id, symbol, valence, weight
  DONE. Create AtomData class for storing properties, initialization from csv line
  DONE. Create DataManager for storing Datas as singletons
---
  DONE. Create BaseComponent, AtomIdentifier, Bond and MolecularStructure classes
  DONE. Create FunctionalGroup derived from BaseComponent
  DONE. Create FunctionalGroups CSV with Id, smiles
  DONE. Create FunctionalGroupData with a MolecularStrcuture and write initilizer from SMILES
---
  DONE. Create Backbone derived from BaseComponent
  DONE. Create Backbones CSV with Id, smiles
  DONE. Create BackboneData with a MolecularStructure and write initilizer from SMILES
---
  DONE. Create OrganicMolecule class
  DONE. Create OrganicMolecules CSV with Id, smiles
  DONE. Create MoleculeData with a MolecularStructure and write initilizer from SMILES
---
  Make sure hydrogen isnt added from smiles into molecules
  ?. Implement BaseReactionCondition
  DONE. Implement ReactionData with CSV loader
  ?. Implement indexing system for reactions
  DONE. Implement maximalMapping
  DONE. Implement reactables and reactable factory
  DONE. Implement reactant - product mapping
  DONE. Implement stoechiometry
  DONE. Implement strict molecule serialization and deserialization
  DONE. Implement pVector
  DONE. Implement query
  DONE. Implement amount
  ?. Accept user balance hints for reactions
  ?. Accept user mapping hints for reactions
  ?. Implement toSMILES
---
  1. Implement reactor 
  DONE. Implement algorithm for checking if a reaction is possible
---
  DONE. Implement graph matching algorithm
  DONE. Hardcode special atom types
  DONE. Write molecule to smiles and cmiles algorithm and print to CSV files
  ?. Implement algorithms iteratively
---
  DONE. Molecular structure improvements: isNormalized field (checks for req methods), implied hydrogen clarifications
---
  1. Fix single key Repositorys
  2. Fix Reactable id clash (Molecule/GenericMolecule)
  DONE. Estimator optimizer
  DONE. Use operator* instead of value() for std::optional
  DONE. Rename approximator to estimator
  DONE. Add class for atom symbol (perhaps char[2/4] is enough)
  5. Add templated binary arithemtic operators to Amount, and remove .asStd() uses.
  DONE. Provide literals to Amount
  DONE. Add .toString() to stream for Amounts
  8. Add fp precision typedefs for systems, amounts, input etc
  9. Add base class for dynamic allocation instance counting
  DONE. Specialize std::hash instead of creating Hash classes
  DONE. Rename LayerPorperties to Layer
  DONE. Add layer iterator
  ?. Fix const Ref<> (const Ref<> should allow non const methods on object, unlike Ref<const>)
  13. Add reactant.moveTo(conainer/layer)
  ?. Cache heat capacity on a tick basis
  DONE. Remove Amount to(x, y) with two params
  10. Use layer as aggregation, rather than checking each time (volume cacheing bugs arrise)
  11. Add combined tests
  DONE. Differentiate between true aggregation and layer aggregation
  DONE. Fix the slight determinism losses when running energy
  DONE. Refactor reactants and reactant set, to use some identifiers
  DONE. Make undefinded targets equal to global dump and remove null target checks
  ?. Treat layers and container refs equally.
  DONE. Add get LayerType and AggregationType name strings
  15. Add more simulation-time logs
  ?. Add getPropertyAtSTP()
  DONE. Better way to mark predefined estimator ids
  16. Make reaction tree methods iterative
  17. Consider avoiding reparsing reactions in the tree (in case of cycles)
  DONE. Rename IdType to just Id
  DONE. Create a class for initContent
  DONE. Rename Repository to Repository
  19. Use std:: for cstdint types
  DONE. Use map instead of unordered_map for storing layers (=> 34.5% sim-time perf. improvement!)
  20. Consider switching LayerType to iterators where possible, within the containers
  DONE. Remove clone from labware components, or add clone without content
  DONE. Use sfDrawable as drawable labware component's base
  DONE. Add spline lossy optimization
  DONE. Add overflow check to dumps
  21. Add object for Molecule-Amount pairs
  22. Spread system ticks across multiple frames
  DONE. Add nullRef type instead of Ref<T>::nullRef
  DONE. Rename normalization to canonicalization
  24. Remove MolecularStructure.mapTo(setB[i], false), only mapTo(setB[i], true) is needed
  25. Add catalysts to specialization tree
  DONE. Add id parser
  DONE. Add DynamicAmount
  DONE. Add duplicate estimator filtering
  26. Add unit splines
---
  DONE. Add heat capacity to molecules as a SplineEstimator
  DONE. Add latent heat(fusion and vaporization) to molecules
  DONE. Add table.add<estimator>() method 
  DONE. Add energy to reactors
  DONE. Add tests for estimators
  DONE. Add tests for reactor heat
---
  DONE. Make Reactor use ReactantSet
  DONE. Add Mixture, LayeredMixture and MultiLayerMixture classes
  DONE. Add SingleLayerMixture class
  DONE. Add overflow logic
  DONE. Add tests for overflows
  DONE. Fix 'leaky' overflow bug
  DONE. Add reactor determinism test
---
  DONE. Add aggregation state changes to reactors
  DONE. Add nucleators to layers
  DONE. Add potential energy conversion logic
  DONE. Add temp state back conversion logic
  DONE. Add tests for layer changes
  DONE. Fix temp state reactants heat capacity bug
---
  1. Add solubility logic
  DONE. Rename MOLTEN SOLID and LIQUEFIED GAS to INORGANIC
  DONE. Add ORGANIC/INORGANIC type to molecules (computed by molecular structure)
  DONE. Add polarity, nonpolarity, hasRetrogradeSolubility henryConstant estimator and temp-sol estimator to molecule data
  DONE. Add getPartitionCoefficient() and getSolubilityAt() methods
  6. Add solubility test
---
  DONE. Add contact energetic effects
  2. Add contact energetic test
  DONE. Add contact reaction logic
  DONE. Add reactor tick modes
---
  DONE. Add incompatible layer forwarding logic
  DONE. Add incompatible layer forwarding test
  DONE. Add implicit forwarding container
  DONE. Add implicit forwarding container test
---
  DONE. Add basic liguistics
---
  1. Finish reaction caching
---
  DONE. Create reaction tree
  DONE. Add method for comparing reactions
  DONE. Add logic for finding concrete reactions
  4. Add logic for reaction property inheritance
---
  DONE. Split reactants into Id <Molecule + Layer> and properties
  DONE. Make reactant set acctually use a map Id -> properties
---
  DONE. Add reactors to labware components
  DONE. Add color field to molecules and layers
  DONE. Create FillShape and add to components
  DONE. Add volumetric scaling to flasks
  DONE. Add lab and lab atmosphere
  DONE. Add tick to labs, systems, and components
  DONE. Add heatsources
  DONE. Add scale to labware components
  DONE. Add display reactor properies
  2. Create mixture network behind labware systems
  3. Add particle system
---
  1. Build and link boost
  1. Add bin parser/printer
---
  1. Add Context
---
  1. Add user define-able radical atoms
---
  1. Add user defineable specific bond properties



KNOWN BUGS:
  FIXED. Bad molecule print for "O=C(C)OC=C".
  FIXED. Exception while parsing reaction: 209,dehydration,RCO,RCOCR;O,1.0@20C,,0.0,
  FIXED. Error while parsing reactions: 212,hydrolysis,O=C(R)OCC;O,O=C(R)O;OCC,,,, and 212,hydrolysis,O=C(CC)OR;O,O=C(CC)O;OR,,,,


 
Possible optimizations:
 - keep symbols as char* to avoid uneccessary constructor for 'C'
 - avoid contains-then-access for maps
 - const fields in data objects need to be copied (git stt moved) on reallocation because of const

Categorizations:
 - When a categorization is done with a backbone or f. group, it is applied globally to all other
   backbones, molecules and f. groups
    => comparison matching does not need to check deep links

 - When a categorization is done with the smallest f. group or backbone first. Once a f. group or 
   backbone is used as a pattern it cannot be modified.
    => already formed bond idexes remain valid

 - Radical atoms where binding occurs will remain in the pattern f. group but when accessed
   from target they will be ignored. Same with hydrogen atoms in backbones 
    => patterns remain unchanged singletons

 - Radical atoms remain in the target even if they are mapped by the pattern
    => an f. group remains trivial, i.e. no deep search is required in order to find its radicals

 - Matched patterns are added at the end of the components vector and the replaced atoms are removed
   the end
    => simplifies algorithm

 - Bonds to composite components need vector of ohter for deep ceonnections

 - System needed for canonicalizing radicals on symetric cycles, p-xylene must be p-xylene no mater the
   position of the methyls. Radicals could always be brought down to the smallest index.


   Reaction activation requirements:
    - all reactants are present in compatible reactor layers
         add trigger: new reactant added
    - activation energy is reached
         cache trigger: activation energy is within range
    - temperature is sufficient
         cache trigger: min react temp is reached
    - catalysts are present
         cache trigger: always
         add trigger: new reactant added


    Physical properties:
      - melting and boiling points:
          They vary with pressure. Data in loaded as the bp and mp and std. pressure.
          An offset estimator is used to get the mp and bp from the std. values and a standard relative bp estimator.

          Defaults to: water.
          Stored as: C


      - densities:
          For solids and liquids:
            They vary by temperature and the variance depends on aggregation state, but not on pressure, thus:
            spline estimators are generated for both liquid and solid densities.
          For gasses:
            The ideal gas law is used.
            Perhaps a more specific approach will be used in the future.

          Defaults to: water.
          Stored as: g/ml


      - heat capacities:
          https://www.tec-science.com/thermodynamics/heat/specific-heat-capacity-of-water/
          For solids:
            Varies with themperature. Spline estimator is used.
          For liquids:
            Almost constant, still a spline approximation can be used. (Consider optimizing 1 and 2 value Splines to constants and functions est.)
          For gases:
            https://www.tec-science.com/thermodynamics/heat/specific-heat-capacity-of-gases-at-constant-volume-or-pressure/
            Isobaric heat capacity is used. (Most systems will be open, i.e. the volume can expand)
            For monoatomics =5R/2, for diatomics =7R/2, for polyatomics =(degrees_of_freedom + 2)*R/2
            For the rare cases of 'pipe bomb' reactors isochoric could be considered.

          Defaults to: water.
          Stored as: J/(mol*C) (molar heat capacity)


      - latent heats:
          For fusion, vaporization and sublimation.
          liquefiation = -fusion, condensation = -vaporization, deposition = -sublimation

          It is expected that latent heats for copression are proportional to pressure. 
          It is expected that latent heats for expansion are inversly proportional to pressure.
          A functional estimator can be used.
          (?) If a substance is introduced in a reactor with a temp higher than its bp/mp, less energy is required
          to produce state change, than when heating gradually. <=> Latent heats are inversly proportional with temperature.
          
          Sublimation occurs when it's latent heat < fusion latent heat.
          Deposition occurs when deposition latent heat < condensation.

          Defaults to: water.
          Stored as: J/mol (molar latent heat)


       - kinetic energy:
           = tempInKelvin * heatCapacity
           
           Since temperature is distributed whithin a uniforn mixtures, the average mixture heatCapacity should be used.

       - heat of reaction:
           The energy released or absorbed by a reaction.
           Stored as: J/mol (relative to 1st product)

       - solubility:
           Solubility only makes sense inside the liquid layers, which are:
           NONPOLAR, POLAR, DENSE_NONPOLAR, INORG_LIQUEFIED_GAS and INORG_MOLTEN_SOLID
           Each molecule should have a polar and nonpolar solubility coeficients:
           polarity & nonpolarity.
           (logP is not enough, perhaps dissolved_grams/liter at 20C)
           Additionally they also need a trait: ORGANIC / INORGANIC.

           When a solvent already has a solute A, to compute the solubility of another solute B:
             find the min amount of solvent that can hold the whole A and use the rest of the solvent to dissovle B
             if there is not enough solvent, push the least soluble solute out to make room for the more soluble solute
           
           - all gasses can mix
           - no solids can mix (but may still share the same layer)
           - liquids mix based on polarity
           - inorganic liquified gasses always mix (not entirely true, but may still share the same layer)
           - organic liquified gasses are actually polar/nonpolar
           - inorganic molten solids always mix (not entirely true, but may still share the same layer)
           - organic molten solids are actually polar/nonpolar

           - liquids and solids dissolve in liquids based on polarity and temperature (solubility increasing/decreasing with temperature)
           - gasses dissolve in liquids to some extent, using Henry's Law

           Henry's Law states that c = p/k, where c = the conc. (mol/L) of the gas in the solvent, p = pressure (atm) and
           k is Henry's Constant (L * atm / mol), which is different for all gasses and ussually increases with temperature => spline estimator
           For efficiency, it should be stored as torr * mol_ratio

           To compute the actual solubility of a solute in a solvent we can average the polarity and nonpolarity of the solute,
           weighted by the logP of the solvent. In case a the solvent is very polar or nonpolar, averaging can be skipped.
           Another more straight forward way is to use the solvent polarity and nonpolarity as weights directly. Remains to be
           decided with way is better.

       - polarity/nonpolarity:
           The amount of solute that dissolves in a certain amount of polar/nonpolar solvent at STP.
             0   -> immiscible
             inf -> miscible
           These values do not directly give the solubility of a solute in any given solvent. Rather they provide a way to
           classify substances, similar to logP but without undefined ratio problems (0/0, inf/0 etc.). Thus, they do not
           vary with T and P.

           Stored as: mol/mol



    Aggregration changes:
        - when energy is added into a reactor, it becomes potential energy
        - potential energy is turned into temperature via avg heat capacity
        - when temperature is equal to the lowest bp (or mp/sp) in the mixture
          (given by nucleators) the remaining energy must be directed to changing
          the state of the reactant with that bp, via latent heat
        - we must know the reactant with min and max bp and mp in each layer
          -> compute on add

        - if a layer contains reactants with transition points, for their current
          state, which are incompatible with the temperature of the layer, these 
          reactants must be returned to their original state and the energy resulted
          form their backward conversion be added to the potential energy of the layer
           * if we include the incompatible reactant in the heat capacity we will add to much energy
             if we exclude it then we might add too little (resulting in more ticks to reach)
                !!! perhaps incompatible reactants should never count towards heat capacity, since they are already 'heated'?
             another way is to add the energy and consume in the same time, potentially resuling in deep recursive calls



          CONSIDER REMOVING THE EXISTANCE THRESHOLD

   -----------------------------------------------------------------------------------------------------------------

   LabwareData:
    - all const properties of a type of labware
    - a list of ports

   Labware:
    - a labware system is a graph of components

   BaseLabComponent:
    - an object that can have some adjacent components and defines the flow between these components
    - have a tick function that defines their effect









    -----------------------------------------------------------------------------------------------------------------


    Potential serialization formats:

    Amount:
        


            react<{gugyug, huahsimdasdu, asdhi}:{hiashud, asygduam, sdguya}>
        [
	        <id:        #123>
	        <density:   spline<C:g/L>[1.0:10.0, 2.0K:15.0]>
	        <speed:     1.0mol/s>
	        <catalysts: {syga, dhsiahdim}>
        ]



Amount<T> -> DynAmount{T}
DynAmount{T1} -> DynAmount{T2}